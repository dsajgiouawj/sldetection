import numpy as np
import matplotlib.pyplot as plt

from keras.models import load_model

import glob
import re
import argparse
import os

def makearr(flist):
    lab=[]
    X=[]
    Xw=[]
    info=[]
    ginfo=[]
    for fn in flist:
        d=np.load(fn,allow_pickle=True)
        lab.append(d["arr_0"][0])
        Xtmp=d["arr_1"]
        Xtmp[Xtmp!=Xtmp]=0.0
        X.append(Xtmp+1.0)

        Xwtmp=d["arr_2"]
        Xwtmp[Xwtmp!=Xwtmp]=0.0        
        Xw.append(Xwtmp+1.0)
        info.append(d["arr_3"])
        ginfo.append(d["arr_4"])
    lab=np.array(lab).astype(np.int32)
    X=np.array(X).reshape(np.shape(X)[0],np.shape(X)[1],1)
    Xw=np.array(Xw).reshape(np.shape(Xw)[0],np.shape(Xw)[1],1)
    #info=np.array(info)
    ginfo=np.array(ginfo)
    
    return lab,X,Xw,info,ginfo

#precision
def Precision(y_true, y_pred):
    true_positives = backend.sum(backend.cast(backend.greater(backend.clip(y_true * y_pred, 0, 1), 0.20), 'float32'))
    pred_positives = backend.sum(backend.cast(backend.greater(backend.clip(y_pred, 0, 1), 0.20), 'float32'))

    precision = true_positives / (pred_positives + backend.epsilon())
    return precision

#recall
def Recall(y_true, y_pred):
    true_positives = backend.sum(backend.cast(backend.greater(backend.clip(y_true * y_pred, 0, 1), 0.20), 'float32'))
    poss_positives = backend.sum(backend.cast(backend.greater(backend.clip(y_true, 0, 1), 0.20), 'float32'))

    recall = true_positives / (poss_positives + backend.epsilon())
    return recall

#f-measure
def Fvalue(y_true, y_pred):
    p_val = Precision(y_true, y_pred)
    r_val = Recall(y_true, y_pred)
    f_val = 2*p_val*r_val / (p_val + r_val)

    return f_val



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='CNN prediction for picklc')
    parser.add_argument('-d', nargs=1, default=["/home/kawahara/gtrap/examples/picklc/group0"],help='directory containing train sets generated by gtls_pickkepler.', type=str)
    args = parser.parse_args()
    traindir=args.d[0]
    print(traindir[-1])
    
    flist=sorted(glob.glob(os.path.join(traindir,'*.npz')))
    print(len(flist))
#    print(flist[0:10])
    lab,X,Xw,info,ginfo=makearr(flist)
    

    model = load_model('h5/astronet.h5')
    pred=model.predict([Xw,X])
    pred=pred.transpose()[0]
    crit=0.995
    flist=np.array(flist)
    mask=(pred>crit)
#    print(np.shape(pred))

    kic=ginfo[mask,0]
    T0=ginfo[mask,1]
#    print(kic)
#    print(ginfo[mask,:])
    rate=pred[mask]
    Xm=X[mask,:,0]
    Xwm=Xw[mask,:,0]
    
    print(pred)
    print("True n=",len(pred[mask]))

    ff = open(traindir+".true.dat", 'w')
    for j,f in enumerate(flist[mask]):
        ff.write(str(int(kic[j]))+"\n")
        fig = plt.figure()
        ax = fig.add_subplot(211)
        ax.plot(Xm[j,:],".")
        plt.title("KIC="+str(kic[j])+" T0="+str(T0[j])+" rate="+str(rate[j]))
        ax = fig.add_subplot(212)
        ax.plot(Xwm[j,:],".")
        plt.savefig("pred"+str(int(kic[j]))+"."+traindir[-1]+".png")
    ff.close()
