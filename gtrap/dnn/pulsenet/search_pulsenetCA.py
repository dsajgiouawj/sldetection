import numpy as np
import matplotlib.pyplot as plt
import gtrap.read_tesstic as tesstic
from keras.models import load_model
import iopulsenet as io
import glob
import re
import argparse
import os
import sys
from urllib.parse import urlparse
import mysql.connector
from gtrap import asteroid_indicator as ai
from gtrap import inverse_cross_bkgd as icb
import plotpulsenet as ppn

#precision
def Precision(y_true, y_pred):
    true_positives = backend.sum(backend.cast(backend.greater(backend.clip(y_true * y_pred, 0, 1), 0.20), 'float32'))
    pred_positives = backend.sum(backend.cast(backend.greater(backend.clip(y_pred, 0, 1), 0.20), 'float32'))

    precision = true_positives / (pred_positives + backend.epsilon())
    return precision

#recall
def Recall(y_true, y_pred):
    true_positives = backend.sum(backend.cast(backend.greater(backend.clip(y_true * y_pred, 0, 1), 0.20), 'float32'))
    poss_positives = backend.sum(backend.cast(backend.greater(backend.clip(y_true, 0, 1), 0.20), 'float32'))

    recall = true_positives / (poss_positives + backend.epsilon())
    return recall

#f-measure
def Fvalue(y_true, y_pred):
    p_val = Precision(y_true, y_pred)
    r_val = Recall(y_true, y_pred)
    f_val = 2*p_val*r_val / (p_val + r_val)

    return f_val



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='CNN prediction for picklc')
    parser.add_argument('-d', nargs=1, default=["/home/kawahara/gtrap/examples/picklcslc/1/npz/"],help='directory containing train sets generated by gtls_slctess.', type=str)
    parser.add_argument('-f', nargs=1, default=["pulsenetCA_train12019_09_02.h5"],help='pulsenet hdf5 file.', type=str)

    args = parser.parse_args()
    print("USE ",args.f[0])
    traindir=args.d[0]
    print(traindir)
    
    flist=sorted(glob.glob(os.path.join(traindir,'*.npz')))
    print(len(flist))
    lab,X,Xw,B,A,info=io.makearrCA(flist)

    model = load_model(args.f[0])
    pred=model.predict([Xw,X,B,A])
    pred=pred.transpose()[0]
#    crit=0.995
    crit=0.99
    flist=np.array(flist)
    mask=(pred>crit)
    print(len(pred[mask]))
    print(np.shape(mask))
    print(np.shape(info))
    print(np.shape(pred[mask]))
    #    print(np.shape(pred))
    tic=info[mask,2]
    sector=info[mask,3]
    camera=info[mask,4]
    CCD=info[mask,5]
    T0=info[mask,6]

    rate=pred[mask]
    Xm=X[mask,:,0]
    Xwm=Xw[mask,:,0]
    
    print(pred[mask])
    print("True n=",len(pred[mask]))
    ff = open("detected.dat", 'w')
    for j,f in enumerate(flist[mask]):
        ticn=str(tic[j])+"_"+str(sector[j])+"_"+str(camera[j])+"_"+str(CCD[j])
        ff.write(ticn+"\n")
    ff.close()

    print("CONNECTING MYSQL...")
    url = urlparse('mysql://fisher:atlantic@133.11.229.168:3306/TESS')
    conn = mysql.connector.connect(
        host = url.hostname or '133.11.229.168',
        port = url.port or 3306,
        user = url.username or 'fisher',
        password = url.password or 'atlantic',
        database = url.path[1:],
    )
    cur = conn.cursor()
    
    for j,f in enumerate(flist[mask]):
        scc=str(sector[j])+"_"+str(camera[j])+"_"+str(CCD[j])
        ticn=str(tic[j])+"_"+str(sector[j])+"_"+str(camera[j])+"_"+str(CCD[j])
        com='SELECT rad,mass FROM CTLchip'+scc+' where ID='+str(tic[j])
        print(com)
        if sector[j]<11:
            hdf = "/manta/pipeline/CTL2/tess_"+str(tic[j])+"_"+str(scc)+".h5"
        else:
            hdf = "/stingray/pipeline/CTL2/tess_"+str(tic[j])+"_"+str(scc)+".h5"
        time, flux, q, cno, ra, dec, tic1, sector1, camera1, CCD1, cnts, apbkg=tesstic.read_tesstic(hdf)        

        cur.execute(com)
        out=cur.fetchall()[0]
        out=np.array(out) #rad, mass
        rstar=out[0]
        mstar=out[1]

        title=ticn+" R="+str(rstar)+" M="+str(mstar)
        ndmax = ai.compute_ndmax(cnts)
        icb1,icb2  = icb.compute_icb(cnts,apbkg)
        T0j=T0[j]
        ppn.plotBC(time,flux,q,icb1,icb2, ndmax,T0j,title, "predCA/predCA"+ticn+".png")

