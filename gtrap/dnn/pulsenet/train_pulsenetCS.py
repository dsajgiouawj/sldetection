import numpy as np
import matplotlib.pyplot as plt
import pickle
from keras.models import Model
from keras.layers import Dense
from keras.layers import Input
from keras.layers import Conv1D
from keras.layers import MaxPooling1D
from keras.layers import Dropout
from keras.layers import Flatten
from keras import backend
from keras.layers.merge import concatenate
import iopulsenet as io
import glob
import re
import argparse
import os
import sys


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='CNN classifier')
    parser.add_argument('-d', nargs=1, default=["/home/kawahara/gtrap/examples/train/train1/data"],help='directory containing train sets generated by gtls_mockkepler.', type=str)
    parser.add_argument('-o', nargs=1, default=["pulsenetCS_train1"],help='directory containing train sets generated by gtls_mockkepler or gtls_slctess.', type=str)
    parser.add_argument('-e', nargs=1, default=[20],help='number of epochs', type=int)

    import datetime    
    args = parser.parse_args()

    output=args.o[0]+datetime.date.today().strftime("%Y_%m_%d")+".h5"
    
    traindir=args.d[0]
    flist=sorted(glob.glob(os.path.join(traindir,'*.npz')))
    print(len(flist))
    lab,X,Xw,G,info=io.makearrCS(flist)
    inlocal = Input(shape=(np.shape(X)[1],np.shape(X)[2]))
    inwide = Input(shape=(np.shape(Xw)[1],np.shape(Xw)[2]))
    inggg=Input(shape=(np.shape(G)[1],np.shape(G)[2]))
    #local=51,wide=251
    #conv〈kernel size〉-〈number of feature maps〉
    #Conv1D(feature, kernel)
    
    pad="same"
    act="relu"
    strmp=2

    wide = Conv1D(8,5,activation=act,padding=pad)(inwide)
    wide = Conv1D(8,5,activation=act,padding=pad)(wide)
    wide = MaxPooling1D(5,strides=strmp)(wide) 
    wide = Conv1D(16,5,activation=act,padding=pad)(wide)
    wide = Conv1D(16,5,activation=act,padding=pad)(wide)
    wide = MaxPooling1D(5,strides=strmp)(wide)
    wide = Conv1D(32,5,activation=act,padding=pad)(wide)
    wide = Conv1D(32,5,activation=act,padding=pad)(wide)
    wide = MaxPooling1D(5,strides=strmp)(wide)
    wide = Conv1D(64,5,activation=act,padding=pad)(wide)
    wide = Conv1D(64,5,activation=act,padding=pad)(wide)
    wide = MaxPooling1D(5,strides=strmp)(wide)
    wide = Conv1D(128,5,activation=act,padding=pad)(wide)
    wide = Conv1D(128,5,activation=act,padding=pad)(wide)
    wide = MaxPooling1D(5,strides=strmp)(wide)
    wide = Flatten()(wide)

    local = Conv1D(8,5,activation=act,padding=pad)(inlocal)
    local = Conv1D(8,5,activation=act,padding=pad)(local)
    local = MaxPooling1D(7,strides=strmp)(local)
    local = Conv1D(16,5,activation=act,padding=pad)(local)
    local = Conv1D(16,5,activation=act,padding=pad)(local)
    local = MaxPooling1D(7,strides=strmp)(local)
    local = Conv1D(32,5,activation=act,padding=pad)(local)
    local = Conv1D(32,5,activation=act,padding=pad)(local)
    local = MaxPooling1D(7,strides=strmp)(local)
    local = Flatten()(local)
    
    ggg = Conv1D(8,5,activation=act,padding=pad)(inggg)
    ggg = Conv1D(8,5,activation=act,padding=pad)(ggg)
    ggg = MaxPooling1D(7,strides=strmp)(ggg)
    ggg = Conv1D(16,5,activation=act,padding=pad)(ggg)
    ggg = Conv1D(16,5,activation=act,padding=pad)(ggg)
    ggg = MaxPooling1D(7,strides=strmp)(ggg)
    ggg = Conv1D(32,5,activation=act,padding=pad)(ggg)
    ggg = Conv1D(32,5,activation=act,padding=pad)(ggg)
    ggg = MaxPooling1D(7,strides=strmp)(ggg)
    ggg = Flatten()(ggg)

    
    concat = concatenate([wide,local,ggg], axis=1)
    concat = Dense(units=512,activation=act)(concat)
    concat = Dense(units=512,activation=act)(concat)
    concat = Dense(units=512,activation=act)(concat)
    concat = Dense(units=512,activation=act)(concat)
    concat = Dense(units=1,activation="sigmoid")(concat)

    model = Model(inputs=[inwide,inlocal,inggg],outputs=concat)    
    model.compile(optimizer="adam",loss="binary_crossentropy",metrics=["acc"])
    print(model.summary())
    history=model.fit([Xw,X,G],lab,epochs=args.e[0],validation_split=0.5)
    model.save(output)
    print("***********acc************")
    print(history.history["acc"])
    print("***********val acc************")
    print(history.history["val_acc"])

    print("***********loss************")
    print(history.history["loss"])
    print("***********val loss************")
    print(history.history["val_loss"])

    fig=plt.figure()
    ax=fig.add_subplot(211)
    ax.plot(history.history["acc"],label="acc")
    ax.plot(history.history["val_acc"],label="val_acc")
    plt.legend()

    ax=fig.add_subplot(212)
    ax.plot(history.history["loss"],label="loss")
    ax.plot(history.history["val_loss"],label="val_loss")
    plt.legend()
    plt.savefig("resCS.png")
    


